import os
import glob
from xml.dom import minidom
import numpy as np
import cv2
import pandas as pd
import xml.etree.ElementTree as ET
import config
import sklearn.preprocessing
from sklearn.model_selection import train_test_split
from pascal_voc_writer import Writer
import shutil
label_names=config.CLASSES;


def createXML(path,width,height,object_name,x1,y1,x2,y2):
    # Writer(path, width, height)

    writer = Writer(path, width, height)

    # ::addObject(name, xmin, ymin, xmax, ymax)

    writer.addObject(object_name, x1, y1, x2, y2)

    # ::save(path)

    writer.save(path)
    
    

    

    
    
def xml_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    i=1;
    for xml_file in glob.glob(path + '/*.xml'):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        i=i+1;
        if(i%50==0):
            print("loading...",i)

        for member in root.findall('object'):
            value = (os.path.join(config.DATASET_PATH,root.find('filename').text[:-3]+'jpg'),
                    # int(root.find('size')[0].text),
                    # int(root.find('size')[1].text),

                    int(member[4][0].text),
                    int(member[4][1].text),
                    int(member[4][2].text),
                    int(member[4][3].text),
                     member[0].text
                    )
            xml_list.append(value)
    column_name = ['filename' ,
                 'xmin', 'ymin', 'xmax', 'ymax','class']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df



def replaceObjectName(base_path,old_class_name,new_class_name):
    count = 0;
    for xml_file_name in os.listdir(base_path):

        if(xml_file_name[-3:]=='xml'):
            xml_file_name=os.path.join(base_path,xml_file_name)
            tree = ET.parse(xml_file_name)
            root = tree.getroot()
            for member in root.findall('object'):
                bbx = member.find('bndbox')
                xmin = int(bbx.find('xmin').text)
                ymin = int(bbx.find('ymin').text)
                xmax = int(bbx.find('xmax').text)
                ymax = int(bbx.find('ymax').text)
                label = member.find('name').text
                if(label==old_class_name):
                    count = count +1;
                    member.find('name').text=new_class_name
            tree.write(xml_file_name)
    print(count,"Instances Replaced")

def moveToTest(folder_path):
    """
        Moves the images with no annotations to the Test folder
    """

    try:
        os.mkdir(folder_path+"/Test")
    except:
        pass;
    dir = os.listdir(folder_path)
    i = 0;
    for file_name in dir:
        print(i)
        if (file_name[-3:] == 'jpg'):
            xml_file_name = file_name[:-4] + ".xml"
            yolo_file_name= file_name[:-4] + ".txt"
            xml_file_path = os.path.join(folder_path, xml_file_name)
            yolo_file_name = os.path.join(folder_path, yolo_file_name)
            if (os.path.exists(xml_file_path) or os.path.exists(yolo_file_name)):
                pass;
            else:
                shutil.move(os.path.join(folder_path, file_name), os.path.join(folder_path,"Test", file_name))
                (os.path.join(folder_path, file_name))
                i = i + 1
    print(i,'files moved out of',len(dir))

def convert_xml_coordinates_to_yolo(size, box):
    dw= 1.0/size[0]
    dh = 1.0/size[1]
    x = (box[0]+box[1])/2.0
    y = (box[2]+box[3])/2.0
    w = box[1]-box[0]
    h = box[3]-box[2]
    x = x*dw
    w = w*dw
    y = y*dh
    h = h*dh
    return (x,y,w,h)


def get_key(val,labels_to_name):
    for key, value in labels_to_name.items():
        if val == value:
            return key


def yoloToXml(folder_path,object_name):
    """
        1 - converts the yolo annotations files to xml files and saved in the same folder
        2- must use individually for each class folder
    """
    for yolo_file in os.listdir(folder_path):
        if(yolo_file[-3:]=="txt"):

            img_name = os.path.join(folder_path,yolo_file[:-3]+"jpg")
            print(img_name)
            img = cv2.imread(img_name)
            H,W,C=img.shape
            save_path = os.path.join(folder_path,yolo_file[:-3]+'xml')
            xml_writer  = Writer(save_path, W, H)
            f=open(os.path.join(folder_path,yolo_file))
            for annotation in f.readlines():
                annotation=str.split(annotation," ")
                centerX = int(float(annotation[1]) *W)
                centerY = int(float(annotation[2])* H)
                w = int(float(annotation[3]) * W)
                h = int(float(annotation[4])* H)
                x1 = int(centerX - w / 2)
                y1 = int(centerY - h / 2)
                x2=int(x1+w)
                y2=int(y1+h)

                # ::addObject(name, xmin, ymin, xmax, ymax)

                xml_writer.addObject(object_name, x1, y1, x2, y2)

                # ::save(path)

            xml_writer.save(save_path)


def xmlToYolo(xml_path,yolo_path):
    # try:
    #     os.mkdir(yolo_path)
    # except:
    #     print("Error creating directory")
    #     return
    dir=os.listdir(xml_path)
    print(len(dir))
    for file_name in dir:
        # print(file_name[-3])

        if(file_name[-3:]=='xml'):
            yolo_file = (os.path.join(yolo_path,file_name[:-4] + '.txt'))

            with open(yolo_file, "w") as f:
                xmldoc = minidom.parse(os.path.join(xml_path,file_name))
                itemlist = xmldoc.getElementsByTagName('object')
                size = xmldoc.getElementsByTagName('size')[0]
                width = int((size.getElementsByTagName('width')[0]).firstChild.data)
                height = int((size.getElementsByTagName('height')[0]).firstChild.data)
                itemlist = xmldoc.getElementsByTagName('object')
                size = xmldoc.getElementsByTagName('size')[0]
                width = int((size.getElementsByTagName('width')[0]).firstChild.data)
                height = int((size.getElementsByTagName('height')[0]).firstChild.data)

                for item in itemlist:
                    # get class label
                    classid = (item.getElementsByTagName('name')[0]).firstChild.data
                    # if classid in label_names:
                    label_str = str(get_key(classid,config.labels_to_name))
                    # else:
                    #     label_str = "-1"
                    #     print("warning: label '%s' not in look-up table" % classid)

                    # get bbox coordinates
                    xmin = ((item.getElementsByTagName('bndbox')[0]).getElementsByTagName('xmin')[0]).firstChild.data
                    ymin = ((item.getElementsByTagName('bndbox')[0]).getElementsByTagName('ymin')[0]).firstChild.data
                    xmax = ((item.getElementsByTagName('bndbox')[0]).getElementsByTagName('xmax')[0]).firstChild.data
                    ymax = ((item.getElementsByTagName('bndbox')[0]).getElementsByTagName('ymax')[0]).firstChild.data
                    b = (float(xmin), float(xmax), float(ymin), float(ymax))
                    bb = convert_xml_coordinates_to_yolo((width, height), b)
                    # print(bb)

                    f.write(label_str + " " + " ".join([("%.6f" % a) for a in bb]) + '\n')

            print("wrote %s" % yolo_file)

def deleteImagesWithoutAnnotations(folder_path):


    dir=os.listdir(folder_path)
    i=0;
    for file_name in dir:
        if(file_name[-3:]=='jpg'):
            xml_file_name = file_name[:-4]+".xml"
            xml_file_path=os.path.join(folder_path,xml_file_name)
            if(os.path.exists(xml_file_path)):
                pass;
            else:
                os.remove(os.path.join(folder_path,file_name))
                i=i+1
    print(i,'files removes out of',len(dir))
def createYoloTrainAndValFiles(folder_path):
    dir = os.listdir(folder_path)
    images_path=[]
    for image_name in dir:
        if(image_name[-3:]=='jpg'):
            images_path.append(os.path.join(folder_path,image_name))

    X=np.array(images_path);
    y=np.arange(0,len(images_path))
    X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size = 0.20, random_state = 42)

    train_file = open(os.path.join('train_yolo.txt'), 'w')
    validation_file=open(os.path.join('validation_yolo.txt'), 'w')
    for f in X_train:
        train_file.write(f+'\n')
    for f in X_val:
        validation_file.write(f + '\n')
    print("Training Images", X_train.shape)
    print("Validation Images", X_val.shape)

    return X_train,X_val


# replaceObjectName('/home/shaheryar/Desktop/Projects/Marrine-Vessel-Detection/Dataset/Annotated_Dataset/Extracted Frames (misc)','Power boat','Power boat')
# xmlToYolo("/home/shaheryar/Desktop/Projects/Marrine-Vessel-Detection/Dataset/Annotated_Dataset/All_Classes_Train","/home/shaheryar/Desktop/Projects/Marrine-Vessel-Detection/Dataset/Annotated_Dataset/All_Classes_Train")
# createYoloTrainAndValFiles("/home/shaheryar/Desktop/Projects/Marrine-Vessel-Detection/Dataset/Annotated_Dataset/All_Classes_Train")

import matplotlib.pyplot as plt
df=pd.read_csv('../Marrine_Vessel_Annotations/all.csv')

# df.to_csv('all.csv',header=None,index=None)
train_df,val_df=train_test_split(df,test_size=0.2)
val_df.iloc[:,5].value_counts().plot(kind='bar')

plt.show()

# train_df.to_csv('train.csv',header=None,index=None)
# val_df.to_csv('val.csv',header=None,index=None)

